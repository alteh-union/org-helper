/*
 * Copyright (c) 2021 Alteh Union (alteh.union@gmail.com)
 *
 * Licensed under the MIT License (see the root LICENSE file for details)
 */

package org.alteh.orghelper.data.database

import androidx.room.Entity
import com.google.gson.annotations.SerializedName
import java.io.Serializable

/**
 * Represents an account from a given [source] platform (like Discord). The Bot does not have its own accounts,
 * it just keeps the info of users from the other platforms. Accordingly, the info presented
 * in the table is fetched from the corresponding source platforms. Except for the [token],
 * which is generated by JWT on the Bot's server in exchange to the authentication code received from
 * a source platform, the [expires] value about when the JWT token will expire, and the [loggedIn] flag,
 * which may indicate not only that user is authenticated in the source and the app is authorized to
 * work with him, but also that the JWT token is not expired/revoked.
 * The [avatar] is expected to be a link to an image on the web.
 */
@Entity(primaryKeys = ["source", "id"])
data class Account (
    @SerializedName("source")
    var source: String = "",
    @SerializedName("id")
    var id: String = "",
    @SerializedName("username")
    var username: String = "",
    @SerializedName("avatar")
    var avatar: String? = null,
    @SerializedName("token")
    var token: String? = null,
    @SerializedName("expires")
    var expires: Long? = null,
    var loggedIn: Boolean = true
) : Serializable {
    companion object {
        /**
         * Checks if ids of the given entities are the same. Besides the DB-related checks this is also
         * needed for the adapters to determine which rows need to be rebound.
         * The data which does not belong to the primary key may be different - it does not affect
         * the algorithm.
         * Two null entities are considered the same. A null entity and a non-null entity are considered not the same.
         */
        fun areItemsTheSame(
            oldItem: Account?,
            newItem: Account?
        ): Boolean {
            if (oldItem == null) {
                return newItem == null
            }
            if (newItem == null) {
                return false
            }
            return oldItem.source == newItem.source &&
                    oldItem.id == newItem.id
        }

        /**
         * Checks if contents of the given entities are the same, leaving the primary keys aside.
         * Besides the DB-related checks this is also needed for the adapters to determine
         * which rows need to be rebound.
         * The primary keys still may be different, so to check whether two entities are completely the
         * same both this function and [areItemsTheSame] need to be invoked.
         */
        fun areContentsTheSame(
            oldItem: Account,
            newItem: Account
        ): Boolean {
            return oldItem.username == newItem.username &&
                    oldItem.avatar == newItem.avatar &&
                    oldItem.token == newItem.token &&
                    oldItem.expires == newItem.expires
        }
    }
}